// vim:ft=javascript

// Note: see README for build details

ARG_ENABLE("mysql-xdevapi",
	"MySQL XDevAPI support | Hybrid Native Client Driver",
	"no");

ARG_ENABLE("mysql-xdevapi-experimental-features",
	"Disable support for the experimental features in mysql-xdevapi",
	"yes");

ARG_ENABLE("mysql-xdevapi-message-classes",
	"Enable support for the experimental message classes in mysql-xdevapi",
	"yes");

ARG_WITH("boost",
	"boost library install dir",
	"");

ARG_WITH("protobuf",
	"protobuf library install dir",
	"");


var Mysql_xdevapi_ext = {

configure : function() {

// ----------------------------------------------------------------------------
// consts

var Ext_label = "mysql-xdevapi";
var Ext_name = "mysql_xdevapi";

// ----------------------------------------------------------------------------
// sources

var mysqlx_devapi_sources = [
	"mysqlx_base_result.cc",
	"mysqlx_base_result_iterator.cc",
	"mysqlx_class_properties.cc",
	"mysqlx_collection.cc",
	"mysqlx_collection__add.cc",
	"mysqlx_collection__find.cc",
	"mysqlx_collection__modify.cc",
	"mysqlx_collection__remove.cc",
	"mysqlx_collection_index.cc",
	"mysqlx_column_result.cc",
	"mysqlx_crud_operation_bindable.cc",
	"mysqlx_crud_operation_limitable.cc",
	"mysqlx_crud_operation_skippable.cc",
	"mysqlx_crud_operation_sortable.cc",
	"mysqlx_database_object.cc",
	"mysqlx_doc_result.cc",
	"mysqlx_doc_result_iterator.cc",
	"mysqlx_driver.cc",
	"mysqlx_exception.cc",
	"mysqlx_executable.cc",
	"mysqlx_execution_status.cc",
	"mysqlx_expression.cc",
	"mysqlx_field_metadata.cc",
	"mysqlx_object.cc",
	"mysqlx_result.cc",
	"mysqlx_result_iterator.cc",
	"mysqlx_row_result.cc",
	"mysqlx_row_result_iterator.cc",
	"mysqlx_schema.cc",
	"mysqlx_schema_object.cc",
	"mysqlx_session.cc",
	"mysqlx_sql_statement.cc",
	"mysqlx_sql_statement_result.cc",
	"mysqlx_sql_statement_result_iterator.cc",
	"mysqlx_table.cc",
	"mysqlx_table__delete.cc",
	"mysqlx_table__insert.cc",
	"mysqlx_table__select.cc",
	"mysqlx_table__update.cc",
	"mysqlx_warning.cc",
	"mysqlx_x_session.cc",
	"php_mysqlx.cc",
	"php_mysqlx_ex.cc",
	"php_xmysqlnd.cc"
];

var mysqlx_messages = [
	"mysqlx_connection.cc",
	"mysqlx_message__auth_continue.cc",
	"mysqlx_message__auth_ok.cc",
	"mysqlx_message__auth_start.cc",
	"mysqlx_message__capabilities.cc",
	"mysqlx_message__capabilities_get.cc",
	"mysqlx_message__capabilities_set.cc",
	"mysqlx_message__capability.cc",
	"mysqlx_message__error.cc",
	"mysqlx_message__ok.cc",
	"mysqlx_message__stmt_execute.cc",
	"mysqlx_message__stmt_execute_ok.cc",
	"mysqlx_message__data_fetch_done.cc",
	"mysqlx_pfc.cc",
	"mysqlx_resultset__column_metadata.cc",
	"mysqlx_resultset__data_row.cc",
	"mysqlx_resultset__resultset_metadata.cc"
];

var mysqlx_util = [
	"allocator.cc",
	"exceptions.cc",
	"hash_table.cc",
	"json_utils.cc",
	"object.cc",
	"pb_utils.cc",
	"string_utils.cc",
	"strings.cc",
	"url_utils.cc",
	"value.cc",
	"zend_utils.cc"
];

var xmysqlnd_sources = [
	"xmysqlnd_any2expr.cc",
	"xmysqlnd_collection.cc",
	"xmysqlnd_crud_collection_commands.cc",
	"xmysqlnd_crud_table_commands.cc",
	"xmysqlnd_driver.cc",
	"xmysqlnd_environment.cc",
	"xmysqlnd_extension_plugin.cc",
	"xmysqlnd_index_collection_commands.cc",
	"xmysqlnd_object_factory.cc",
	"xmysqlnd_protocol_dumper.cc",
	"xmysqlnd_protocol_frame_codec.cc",
	"xmysqlnd_rowset.cc",
	"xmysqlnd_rowset_buffered.cc",
	"xmysqlnd_rowset_fwd.cc",
	"xmysqlnd_schema.cc",
	"xmysqlnd_session.cc",
	"xmysqlnd_statistics.cc",
	"xmysqlnd_stmt.cc",
	"xmysqlnd_stmt_execution_state.cc",
	"xmysqlnd_stmt_result.cc",
	"xmysqlnd_stmt_result_meta.cc",
	"xmysqlnd_table.cc",
	"xmysqlnd_utils.cc",
	"xmysqlnd_warning_list.cc",
	"xmysqlnd_wireprotocol.cc",
	"xmysqlnd_zval2any.cc"
];

var xmysqlnd_cdkbase_core = [
	"codec.cc"
];

var xmysqlnd_cdkbase_foundation = [
	"error.cc",
	"string.cc"
];

var xmysqlnd_cdkbase_parser = [
	"expr_parser.cc",
	"json_parser.cc",
	"tokenizer.cc"
];

var xmysqlnd_crud_parsers = [
	"expression_parser.cc",
	"legacy_tokenizer.cc",
	"mysqlx_crud_parser.cc"
];

var xmysqlnd_protobuf_sources = [
	"mysqlx_connection.pb.cc",
	"mysqlx_crud.pb.cc",
	"mysqlx_datatypes.pb.cc",
	"mysqlx_expect.pb.cc",
	"mysqlx_expr.pb.cc",
	"mysqlx_notice.pb.cc",
	"mysqlx.pb.cc",
	"mysqlx_resultset.pb.cc",
	"mysqlx_session.pb.cc",
	"mysqlx_sql.pb.cc"
];

function get_src_dir(subdir) {
	return configure_module_dirname + '/' + subdir;
}

function concatenate(items, decorator) {
	// Array.forEach is not supported by JScript or may be not supported
	// by older version, so concatenate with ordinary loop (not 'in' which
	// also may be not supported)
	var result = '';
	for (var i = 0; i < items.length; ++i) {
		var item = items[i];
		if (item) {
			result += decorator(item) + ' ';
		}
	}
	return result;
}

// ----------------------------------------------------------------------------
// vars

var environment = WshShell.Environment("Process");
var file_system = WScript.CreateObject("Scripting.FileSystemObject");

// ----------------------------------------------------------------------------
// utils

function print(text) {
	STDOUT.Write(text);
}

function println(text) {
	STDOUT.WriteLine(text);
}

function exec_command(command, description) {
	println(description);
	println(command);

	var exec = WshShell.Exec(command);
	print(exec.StdOut.ReadAll());
	print(exec.StdErr.ReadAll());
	return exec.Status;
}

// ------

function get_env(env_var) {
	return environment.Item(env_var);
}

function get_env_path(env_var, subdir) {
	var env_path = get_env(env_var);
	if (!env_path) return null;
	return subdir ? env_path + '/' + subdir : env_path;
}

function get_env_include(env_var) {
	return get_env_path(env_var, 'include');
}

function get_env_lib(env_var) {
	return get_env_path(env_var, 'lib');
}

// ------

function path_exists(path) {
	return file_system.FolderExists(path) || file_system.FileExists(path);
}

function prepare_optional_path(base_dir, sub_dir) {
	if (!base_dir) return null;
	return base_dir + '/' + sub_dir;
}

function search_path(base_paths, subpaths, label) {
	print("Searching for " + (label ? label : subpaths) + " ... ");
	for (var i = 0; i < base_paths.length; ++i) {
		var base_path = base_paths[i];
		if (!base_path) continue;

		for (var j = 0; j < subpaths.length; ++j) {
			var subpath = subpaths[j];
			var full_path = base_path + '/' + subpath;
			if (path_exists(full_path)) {
				println("found in " + full_path);
				return {
					base_path: base_path,
					subpath: subpath,
					full_path: full_path
				};
			}
		}
	}
	println("not found");
	return null;
}

function search_base_path(base_paths, subpath) {
	var path_info = search_path(base_paths, [subpath]);
	return path_info ? path_info.base_path : null;
}

function search_full_path(base_paths, subpath) {
	var path_info = search_path(base_paths, [subpath]);
	return path_info ? path_info.full_path : null;
}

// ----------------------------------------------------------------------------
// prerequisites

var extra_includes;
var extra_libs;

var boost_root;

var protobuf_lib_path;
var protobuf_include_dir;
var protoc_path;

// ------

function resolve_extra_dirs(php_extra_dirs) {
	if (!php_extra_dirs || !php_extra_dirs.length) return [];
	print('extra_dirs ');
	println(php_extra_dirs);
	return php_extra_dirs.split(';');
}

function resolve_extra_includes() {
	this.extra_includes = resolve_extra_dirs(PHP_EXTRA_INCLUDES);
}

function resolve_extra_libs() {
	this.extra_libs = resolve_extra_dirs(PHP_EXTRA_LIBS);
}

// ------

function hint_3rd_party_lib_env(env_var_name) {
	println('    consider setting ' + env_var_name);
}

// ------

function resolve_boost_root() {
	var dirs_to_search =
		[PHP_BOOST]
		.concat(this.extra_includes)
		.concat([
			get_env_path('MYSQL_XDEVAPI_BOOST_ROOT'),
			get_env_path('BOOST_ROOT'),
			get_env_path('BOOST_PATH')
		]
	);

	return search_base_path(dirs_to_search, "boost/version.hpp");
}

function resolve_boost_paths() {
	this.boost_root = resolve_boost_root();
	if (!this.boost_root) {
		hint_3rd_party_lib_env('MYSQL_XDEVAPI_BOOST_ROOT');
		WARNING("boost library not found")
	}
}

// ------

function resolve_default_protobuf_root() {
	var default_protoc_path = PATH_PROG('protoc', get_env("PATH"));
	if (!default_protoc_path) return null;
	var default_protobuf_bin_dir = file_system.GetParentFolderName(default_protoc_path);
	return file_system.GetParentFolderName(default_protobuf_bin_dir);
}

// ------

function get_protobuf_lib_search_label() {
	return '[lib]protobuf' + (PHP_DEBUG == "yes" ? '[d]' : '') + '.lib';
}

function get_protobuf_lib_search_dirs(default_protobuf_root) {
	var search_dirs =
		[prepare_optional_path(PHP_PROTOBUF, 'lib')]
		.concat(this.extra_libs)
		.concat([
			get_env_lib('MYSQL_XDEVAPI_PROTOBUF_ROOT'),
			get_env_lib('PROTOBUF_ROOT'),
			get_env_lib('PROTOBUF_PATH'),
			prepare_optional_path(default_protobuf_root, 'lib')
		]);

	return search_dirs;
}

function get_protobuf_lib_names() {
	var libnames = [
		'protobuf.lib',
		'libprotobuf.lib'
	];

	if (PHP_DEBUG == "yes") {
		libnames = libnames.concat([
			'protobufd.lib',
			'libprotobufd.lib'
		]);
	}

	return libnames;
}

function resolve_protobuf_lib_dir(default_protobuf_root) {
	var dirs_to_search = get_protobuf_lib_search_dirs(default_protobuf_root);
	var libnames = get_protobuf_lib_names();
	var label = get_protobuf_lib_search_label();
	return search_path(dirs_to_search, libnames, label);
}

// ------

function resolve_protobuf_include_dir(default_protobuf_root) {
	var dirs_to_search =
		[prepare_optional_path(PHP_PROTOBUF, 'include')]
		.concat(this.extra_includes)
		.concat([
			get_env_include('MYSQL_XDEVAPI_PROTOBUF_ROOT'),
			get_env_include('PROTOBUF_ROOT'),
			get_env_include('PROTOBUF_PATH'),
			prepare_optional_path(default_protobuf_root, 'include')
		]);

	return search_base_path(dirs_to_search, "google/protobuf");
}

function resolve_protoc_path() {
	var dirs_to_search = [
		PHP_PROTOBUF,
		get_env_path('MYSQL_XDEVAPI_PROTOBUF_ROOT'),
		prepare_optional_path(this.protobuf_lib_path ? this.protobuf_lib_path.base_path : null, '..'),
		prepare_optional_path(this.protobuf_include_dir, '..'),
		get_env_path('PROTOBUF_ROOT'),
		get_env_path('PROTOBUF_PATH')
	];

	return search_full_path(dirs_to_search, "bin/protoc.exe");
}

function resolve_protobuf_paths() {
	var default_protobuf_root = resolve_default_protobuf_root();
	this.protobuf_lib_path = resolve_protobuf_lib_dir(default_protobuf_root);
	this.protobuf_include_dir = resolve_protobuf_include_dir(default_protobuf_root);
	this.protoc_path = resolve_protoc_path();
	if (!this.protobuf_lib_path || !this.protobuf_include_dir || !this.protoc_path) {
		hint_3rd_party_lib_env('MYSQL_XDEVAPI_PROTOBUF_ROOT');
		ERROR("protobuf library not found")
	}
}

// ------

function init_prerequisites() {
	resolve_extra_includes();
	resolve_extra_libs();
	resolve_boost_paths();
	resolve_protobuf_paths();
}

// ----------------------------------------------------------------------------
// requirements

function check_lib(libname, path_to_check) {
	return CHECK_LIB(libname, Ext_name, path_to_check);
}

function check_protobuf_lib_by_path(lib_path) {
	if (!lib_path) return false;
	return check_lib(lib_path.subpath, lib_path.base_path);
}

function check_protobuf_lib_by_default_name() {
	var libnames = get_protobuf_lib_names();
	for (var i = 0; i < libnames.length; ++i) {
		if (check_lib(libnames[i])) {
			return true;
		}
	}
	return false;
}

function is_protobuf_available() {
	return check_protobuf_lib_by_path(this.protobuf_lib_path)
		|| check_protobuf_lib_by_default_name();
}

function is_winsock_available() {
	return check_lib("ws2_32.lib");
}

function is_json_available() {
	return PHP_JSON != "no";
}

function verify_requirements() {
	return is_protobuf_available()
		&& is_winsock_available()
		&& is_json_available();
}

// ----------------------------------------------------------------------------
// protobufs

function get_protoc_path() {
	var resolved_protoc_path = this.protoc_path;
	return resolved_protoc_path ? resolved_protoc_path : PATH_PROG("protoc");
}

function protodef_full_path(protobuf_file) {
	var protobuf_dir = get_src_dir('xmysqlnd/proto_def');
	return protobuf_dir + '/' + protobuf_file;
}

function get_protodef_paths() {
	var mysqlx_proto_sources = [
		"mysqlx.proto",
		"mysqlx_connection.proto",
		"mysqlx_crud.proto",
		"mysqlx_datatypes.proto",
		"mysqlx_expect.proto",
		"mysqlx_expr.proto",
		"mysqlx_notice.proto",
		"mysqlx_resultset.proto",
		"mysqlx_session.proto",
		"mysqlx_sql.proto"
	];

	return concatenate(mysqlx_proto_sources, protodef_full_path);
}

function get_protoc_includes() {
	var protoc_includes = this.protobuf_include_dir;
	return protoc_includes ? '-I' + protoc_includes : null;
}

function generate_protobufs() {
	var protoc_path = get_protoc_path();

	var protoc_version_cmd = protoc_path + " --version";
	exec_command(protoc_version_cmd);

	var protobuf_generation_cmd = [
		protoc_path,
		get_protoc_includes(),
		'--proto_path', get_src_dir('xmysqlnd/proto_def'),
		'--cpp_out', get_src_dir('xmysqlnd/proto_gen'),
		get_protodef_paths()
	].join(' ');
	exec_command(protobuf_generation_cmd, "generate mysql_xdevapi protobufs");
}

// ----------------------------------------------------------------------------
// compiler options

function prepare_include(dir) {
	if (!dir) return null;
	return "/I " + dir;
}

function get_includes() {
	var includes = [
		get_src_dir(""),
		get_src_dir("xmysqlnd/cdkbase"),
		get_src_dir("xmysqlnd/cdkbase/include"),
		this.protobuf_dir_include,
		this.boost_root
	];

	return concatenate(includes, prepare_include);
}

function cfg_preprocessor_def(config_argument, preprocessor_def) {
	if (config_argument == 'no') return '';
	return '/D ' + preprocessor_def;
}

function get_preprocessor_definitions() {
	return [
		"/D ZEND_ENABLE_STATIC_TSRMLS_CACHE=1",
		"/D ZEND_WIN32_KEEP_INLINE",
		"/U ZEND_WIN32_FORCE_INLINE",
		cfg_preprocessor_def(PHP_MYSQL_XDEVAPI_MESSAGE_CLASSES, "MYSQL_XDEVAPI_MESSAGE_CLASSES"),
		cfg_preprocessor_def(PHP_MYSQL_XDEVAPI_EXPERIMENTAL_FEATURES, "MYSQL_XDEVAPI_EXPERIMENTAL_FEATURES")
	].join(' ');
}

function get_compiler_options() {
	return [
		"/W4", // warnings level
		"/EHsc", // enable exceptions
		"/std:c++14" // standard compliance
	].join(' ');
}

function prepare_cxx_flags() {
	return [
		get_includes(),
		get_preprocessor_definitions(),
		get_compiler_options()
	].join(' ');
}

// ----------------------------------------------------------------------------
// php extension

function init_extension(base_sources) {
	EXTENSION(
		Ext_name,
		base_sources.join(' '),
		PHP_MYSQL_XDEVAPI_SHARED,
		prepare_cxx_flags());
}

function add_sources(subdir, sources) {
	ADD_SOURCES(get_src_dir(subdir), sources.join(' '), Ext_name);
}

function add_dependency(dep_extension_name) {
	ADD_EXTENSION_DEP(Ext_name, dep_extension_name, false);
}

// ----------------------------------------------------------------------------
// setup

init_prerequisites();

if (!verify_requirements()) {
	WARNING(Ext_label + " not enabled, necessary libraries not found or dependencies not enabled");
	PHP_MYSQL_XDEVAPI = "no";
	return;
}

generate_protobufs();

init_extension(mysqlx_devapi_sources);
add_sources("messages", mysqlx_messages);
add_sources("util", mysqlx_util);
add_sources("xmysqlnd", xmysqlnd_sources);
add_sources("xmysqlnd/cdkbase/core", xmysqlnd_cdkbase_core);
add_sources("xmysqlnd/cdkbase/foundation", xmysqlnd_cdkbase_foundation);
add_sources("xmysqlnd/cdkbase/parser", xmysqlnd_cdkbase_parser);
add_sources("xmysqlnd/crud_parsers", xmysqlnd_crud_parsers);
add_sources("xmysqlnd/proto_gen", xmysqlnd_protobuf_sources);

if (PHP_MYSQL_XDEVAPI_SHARED) {
	ADD_FLAG("CFLAGS_MYSQL_XDEVAPI", "/D PHP_MYSQL_XDEVAPI_EXPORTS");
}

// dependencies
add_dependency('hash');
add_dependency('json');
add_dependency('mysqlnd');

if (!MODE_PHPIZE && (PHP_MYSQLND == "no")) {
	PHP_MYSQLND = "yes";
	MESSAGE(Ext_label + " depends on mysqlnd, it has been enabled");
}

AC_DEFINE('HAVE_MYSQL_XDEVAPI', 1, 'mysql-xdevapi support enabled');

} // configure

} // Mysql_xdevapi_ext

if (PHP_MYSQL_XDEVAPI != "no") {
	Mysql_xdevapi_ext.configure();
}
